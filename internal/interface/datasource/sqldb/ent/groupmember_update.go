// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/AkiOuma/biz-groups/internal/interface/datasource/sqldb/ent/groupmember"
	"github.com/AkiOuma/biz-groups/internal/interface/datasource/sqldb/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupMemberUpdate is the builder for updating GroupMember entities.
type GroupMemberUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMemberMutation
}

// Where appends a list predicates to the GroupMemberUpdate builder.
func (gmu *GroupMemberUpdate) Where(ps ...predicate.GroupMember) *GroupMemberUpdate {
	gmu.mutation.Where(ps...)
	return gmu
}

// SetGroupID sets the "group_id" field.
func (gmu *GroupMemberUpdate) SetGroupID(i int) *GroupMemberUpdate {
	gmu.mutation.ResetGroupID()
	gmu.mutation.SetGroupID(i)
	return gmu
}

// AddGroupID adds i to the "group_id" field.
func (gmu *GroupMemberUpdate) AddGroupID(i int) *GroupMemberUpdate {
	gmu.mutation.AddGroupID(i)
	return gmu
}

// SetMemberID sets the "member_id" field.
func (gmu *GroupMemberUpdate) SetMemberID(i int) *GroupMemberUpdate {
	gmu.mutation.ResetMemberID()
	gmu.mutation.SetMemberID(i)
	return gmu
}

// AddMemberID adds i to the "member_id" field.
func (gmu *GroupMemberUpdate) AddMemberID(i int) *GroupMemberUpdate {
	gmu.mutation.AddMemberID(i)
	return gmu
}

// Mutation returns the GroupMemberMutation object of the builder.
func (gmu *GroupMemberUpdate) Mutation() *GroupMemberMutation {
	return gmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmu *GroupMemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gmu.hooks) == 0 {
		affected, err = gmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmu.mutation = mutation
			affected, err = gmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gmu.hooks) - 1; i >= 0; i-- {
			if gmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmu *GroupMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := gmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmu *GroupMemberUpdate) Exec(ctx context.Context) error {
	_, err := gmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmu *GroupMemberUpdate) ExecX(ctx context.Context) {
	if err := gmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmu *GroupMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmember.Table,
			Columns: groupmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupmember.FieldID,
			},
		},
	}
	if ps := gmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmu.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmu.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmu.mutation.MemberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldMemberID,
		})
	}
	if value, ok := gmu.mutation.AddedMemberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldMemberID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GroupMemberUpdateOne is the builder for updating a single GroupMember entity.
type GroupMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMemberMutation
}

// SetGroupID sets the "group_id" field.
func (gmuo *GroupMemberUpdateOne) SetGroupID(i int) *GroupMemberUpdateOne {
	gmuo.mutation.ResetGroupID()
	gmuo.mutation.SetGroupID(i)
	return gmuo
}

// AddGroupID adds i to the "group_id" field.
func (gmuo *GroupMemberUpdateOne) AddGroupID(i int) *GroupMemberUpdateOne {
	gmuo.mutation.AddGroupID(i)
	return gmuo
}

// SetMemberID sets the "member_id" field.
func (gmuo *GroupMemberUpdateOne) SetMemberID(i int) *GroupMemberUpdateOne {
	gmuo.mutation.ResetMemberID()
	gmuo.mutation.SetMemberID(i)
	return gmuo
}

// AddMemberID adds i to the "member_id" field.
func (gmuo *GroupMemberUpdateOne) AddMemberID(i int) *GroupMemberUpdateOne {
	gmuo.mutation.AddMemberID(i)
	return gmuo
}

// Mutation returns the GroupMemberMutation object of the builder.
func (gmuo *GroupMemberUpdateOne) Mutation() *GroupMemberMutation {
	return gmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmuo *GroupMemberUpdateOne) Select(field string, fields ...string) *GroupMemberUpdateOne {
	gmuo.fields = append([]string{field}, fields...)
	return gmuo
}

// Save executes the query and returns the updated GroupMember entity.
func (gmuo *GroupMemberUpdateOne) Save(ctx context.Context) (*GroupMember, error) {
	var (
		err  error
		node *GroupMember
	)
	if len(gmuo.hooks) == 0 {
		node, err = gmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmuo.mutation = mutation
			node, err = gmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gmuo.hooks) - 1; i >= 0; i-- {
			if gmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmuo *GroupMemberUpdateOne) SaveX(ctx context.Context) *GroupMember {
	node, err := gmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmuo *GroupMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := gmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmuo *GroupMemberUpdateOne) ExecX(ctx context.Context) {
	if err := gmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmuo *GroupMemberUpdateOne) sqlSave(ctx context.Context) (_node *GroupMember, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmember.Table,
			Columns: groupmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupmember.FieldID,
			},
		},
	}
	id, ok := gmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupmember.FieldID)
		for _, f := range fields {
			if !groupmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmuo.mutation.GroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmuo.mutation.AddedGroupID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldGroupID,
		})
	}
	if value, ok := gmuo.mutation.MemberID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldMemberID,
		})
	}
	if value, ok := gmuo.mutation.AddedMemberID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: groupmember.FieldMemberID,
		})
	}
	_node = &GroupMember{config: gmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
