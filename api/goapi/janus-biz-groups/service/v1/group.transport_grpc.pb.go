// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: group.transport.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportClient interface {
	FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...grpc.CallOption) (*FindGroupsReply, error)
	SaveGroups(ctx context.Context, in *SaveGroupsRequest, opts ...grpc.CallOption) (*SaveGroupsReply, error)
	RemoveGroups(ctx context.Context, in *RemoveGroupsRequest, opts ...grpc.CallOption) (*RemoveGroupsReply, error)
	FindGroupMember(ctx context.Context, in *FindGroupMemberRequest, opts ...grpc.CallOption) (*FindGroupMemberReply, error)
	AddGroupMember(ctx context.Context, in *AddGroupMemberRequest, opts ...grpc.CallOption) (*AddGroupMemberReply, error)
	RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...grpc.CallOption) (*FindGroupsReply, error) {
	out := new(FindGroupsReply)
	err := c.cc.Invoke(ctx, "/service.v1.Transport/FindGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) SaveGroups(ctx context.Context, in *SaveGroupsRequest, opts ...grpc.CallOption) (*SaveGroupsReply, error) {
	out := new(SaveGroupsReply)
	err := c.cc.Invoke(ctx, "/service.v1.Transport/SaveGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) RemoveGroups(ctx context.Context, in *RemoveGroupsRequest, opts ...grpc.CallOption) (*RemoveGroupsReply, error) {
	out := new(RemoveGroupsReply)
	err := c.cc.Invoke(ctx, "/service.v1.Transport/RemoveGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) FindGroupMember(ctx context.Context, in *FindGroupMemberRequest, opts ...grpc.CallOption) (*FindGroupMemberReply, error) {
	out := new(FindGroupMemberReply)
	err := c.cc.Invoke(ctx, "/service.v1.Transport/FindGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) AddGroupMember(ctx context.Context, in *AddGroupMemberRequest, opts ...grpc.CallOption) (*AddGroupMemberReply, error) {
	out := new(AddGroupMemberReply)
	err := c.cc.Invoke(ctx, "/service.v1.Transport/AddGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error) {
	out := new(RemoveGroupMemberReply)
	err := c.cc.Invoke(ctx, "/service.v1.Transport/RemoveGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
// All implementations must embed UnimplementedTransportServer
// for forward compatibility
type TransportServer interface {
	FindGroups(context.Context, *FindGroupsRequest) (*FindGroupsReply, error)
	SaveGroups(context.Context, *SaveGroupsRequest) (*SaveGroupsReply, error)
	RemoveGroups(context.Context, *RemoveGroupsRequest) (*RemoveGroupsReply, error)
	FindGroupMember(context.Context, *FindGroupMemberRequest) (*FindGroupMemberReply, error)
	AddGroupMember(context.Context, *AddGroupMemberRequest) (*AddGroupMemberReply, error)
	RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error)
	mustEmbedUnimplementedTransportServer()
}

// UnimplementedTransportServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (UnimplementedTransportServer) FindGroups(context.Context, *FindGroupsRequest) (*FindGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroups not implemented")
}
func (UnimplementedTransportServer) SaveGroups(context.Context, *SaveGroupsRequest) (*SaveGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGroups not implemented")
}
func (UnimplementedTransportServer) RemoveGroups(context.Context, *RemoveGroupsRequest) (*RemoveGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroups not implemented")
}
func (UnimplementedTransportServer) FindGroupMember(context.Context, *FindGroupMemberRequest) (*FindGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroupMember not implemented")
}
func (UnimplementedTransportServer) AddGroupMember(context.Context, *AddGroupMemberRequest) (*AddGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupMember not implemented")
}
func (UnimplementedTransportServer) RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupMember not implemented")
}
func (UnimplementedTransportServer) mustEmbedUnimplementedTransportServer() {}

// UnsafeTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServer will
// result in compilation errors.
type UnsafeTransportServer interface {
	mustEmbedUnimplementedTransportServer()
}

func RegisterTransportServer(s grpc.ServiceRegistrar, srv TransportServer) {
	s.RegisterService(&Transport_ServiceDesc, srv)
}

func _Transport_FindGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).FindGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Transport/FindGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).FindGroups(ctx, req.(*FindGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_SaveGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).SaveGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Transport/SaveGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).SaveGroups(ctx, req.(*SaveGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_RemoveGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).RemoveGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Transport/RemoveGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).RemoveGroups(ctx, req.(*RemoveGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_FindGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).FindGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Transport/FindGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).FindGroupMember(ctx, req.(*FindGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_AddGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).AddGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Transport/AddGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).AddGroupMember(ctx, req.(*AddGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_RemoveGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).RemoveGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.v1.Transport/RemoveGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).RemoveGroupMember(ctx, req.(*RemoveGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transport_ServiceDesc is the grpc.ServiceDesc for Transport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.v1.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindGroups",
			Handler:    _Transport_FindGroups_Handler,
		},
		{
			MethodName: "SaveGroups",
			Handler:    _Transport_SaveGroups_Handler,
		},
		{
			MethodName: "RemoveGroups",
			Handler:    _Transport_RemoveGroups_Handler,
		},
		{
			MethodName: "FindGroupMember",
			Handler:    _Transport_FindGroupMember_Handler,
		},
		{
			MethodName: "AddGroupMember",
			Handler:    _Transport_AddGroupMember_Handler,
		},
		{
			MethodName: "RemoveGroupMember",
			Handler:    _Transport_RemoveGroupMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.transport.proto",
}
